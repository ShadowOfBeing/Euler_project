# список слов, из которых состоят любые числа в словарной записи (менее 1 триллиона)
a = ['and', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten', 'eleven',
     'twelve', 'thirteen', 'fourteen', 'fifteen', 'sixteen', 'seventeen', 'eighteen', 'nineteen',
     'twenty', 'thirty', 'forty', 'fifty', 'sixty', 'seventy', 'eighty', 'ninety', 'hundred',
     'thousand', 'million', 'billion']


# функция переводит число от 1 до 999 в словарный вид и возвращает в виде списка
def list_of_numbers_in_words_less_1000(x):
    # если число равно нулю, то функия вернёт пустой список
    b = []
    # если число больше 0 и меньше 10, тогда функция вернёт словарное обозначение числа из списка
    # констант (списка 'a') с немедленным выходом из функции
    if 0 < x < 10:
        b += [a[0]] + [a[x]]
        return b
    # если десятичная часть числа больше 0 и меньше 20, тогда в список b будет добавлено её уникальное
    # словарное обозначение из списка а. Словарные обозначения для чисел от 1 до 19 идут с шагом в 1.
    if 0 < x % 100 < 20:
        b += [a[0]] + [a[x % 100]]
    # уникальные словарные обозначения десятков от 20 до 90 идут с шагом в 10, поэтому вынесены в
    # отдельный блок.
    if x % 100 > 19:
        # если единичная часть числа равна нулю (т.е. число кратно 10), тогда в список b будет
        # добавлено лишь её уникальное словарное обозначение десятичной части (так как
        # единичная часть равна нулю).
        if x % 10 == 0:
            b += [a[0]] + [a[18 + (x % 100) // 10]]
        # в ином случае к словарному обозначению десятичной части добавляем так же словарное
        # обозначение единичной части.
        # по правилам британского английского языка десятичные числительные с ненулевой единичной
        # частью пишутся через дефис.
        else:
            b += [a[0]] + [a[18 + (x % 100) // 10] + '-' + a[(x % 100) % 10]]
    # если число больше 99, тогда добавляем словарное обозначение сотен в следующем порядке:
    # 1) само число сотен именуем словарным обозначением для чисел от 1 до 9
    # 2) добавляем пробел
    # 3) добавляем словарное обозначение для сотен (hundred)
    # 4) добавляем содержимое списка b
    if x > 99:
        b = [a[x // 100] + ' ' + a[28]] + b
    return b


# функция составляет и печатает полные словарные обозначения чисел из кусков по 3 цифры, которые
# получает от функции выше
def list_of_numbers_in_words(x):
    # функция рассчитана на обработку чисел менее 1 триллиона, поэтому для числа больше
    # 999 миллиардов вернёт сообщение 'number more than 999 billion'
    if len(str(x)) > 12:
        return 'number more than 999 billion'
    for i in range(1, x + 1):
        b = []
        u = i
        # сначала переводим в слова первые 3 цифры числа
        b = list_of_numbers_in_words_less_1000(u % 1000) + b
        u //= 1000
        s = 0
        # затем переводим в слова тысячную часть числа, миллионную и миллиардную, если они есть
        while u > 0:
            b = [a[29 + s]] + b
            b = list_of_numbers_in_words_less_1000(u % 1000) + b
            u //= 1000
            s += 1
        # избавляемся от слова 'and' в начале списка, если оно там стоит
        if b[0] == a[0]:
            b.pop(0)
        # разворачиваем список и печатаем число словами
        print(*b)

# решил сам
list_of_numbers_in_words(100000)